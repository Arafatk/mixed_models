require 'MixedModels'

require 'distribution'
rand_norm = Distribution::Normal.rng(0,1)

# Generate the 500x2 fixed effects design matrix
x_array = Array.new(100) { 1 }
x_array.each_index { |i| x_array[i]=(i+1)/2 if (i+1)%2==0 } 
x = NMatrix.new([50,2], x_array, dtype: :float64)

# Fixed effects coefficient vector
beta = NMatrix.new([2,1], [1,1], dtype: :float64)

# Generate the mixed effects model matrix
# (Assume a group structure with five groups of equal size)
grp_mat = NMatrix.zeros([50,5], dtype: :float64)
[0,10,20,30,40].each { |i| grp_mat[i...(i+10), i/10] = 1.0 }
# (Create matrix for random intercept and slope)
z = grp_mat.khatri_rao_rows x

# Generate the random effects vector 
# Values generated by R from the multivariate distribution with mean 0
# and covariance matrix [ [1, 0.5], [0.5, 1] ]
b_array = [ -1.34291864, 0.37214635,-0.42979766, 0.03111855, 1.98241161, 
            0.71735038, 0.40448848,-0.28236437, 0.33479745,-0.11086452 ]
b = NMatrix.new([10,1], b_array, dtype: :float64)

# Generate the random residuals vector
# Values generated from the standard Normal distribution
epsilon_array = Array.new(50) { rand_norm.call } 
epsilon = NMatrix.new([50,1], epsilon_array, dtype: :float64)
 
# Generate the response vector
y = (x.dot beta) + (z.dot b) + epsilon

# Set up the initial estimate of the covariance matrix 
lambdat = NMatrix.identity(10, dtype: :float64)
parametrization = Proc.new do |th| 
  diag_blocks = Array.new(5) { NMatrix.new([2,2], [th[0],th[1],0,th[2]], dtype: :float64) }
  NMatrix.block_diagonal(*diag_blocks, dtype: :float64) 
end

# Fit the model
model_fit = LMM.new(x: x, y: y, zt: z.transpose, lambdat: lambdat, 
                    start_point: [1,0,1], lower_bound: Array[0,-Float::INFINITY,0],
                    &parametrization) 

# Print some results
puts "(1) Model fit"
puts "Optimal theta: \t#{model_fit.theta_optimal}"
puts "REML criterion: \t#{model_fit.dev_optimal}"

puts "(2) Fixed effects"
puts "Coefficient estimates: \t#{model_fit.fix_ef}"
puts "Mean squared error: \t#{model_fit.mse}"

puts "(3) Random effects"
sd1 = Math::sqrt(model_fit.sigma_mat[0,0])
puts "Random intercept sd: \t#{sd1}"
sd2 = Math::sqrt(model_fit.sigma_mat[1,1])
puts "Random slope sd: \t#{sd2}"
puts "Correlation of random intercept and slope: \t#{model_fit.sigma_mat[0,1] / (sd1*sd2)}"
